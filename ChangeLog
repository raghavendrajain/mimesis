ディレクトリ構成
./		: 作業ディレクトリ
./mdb		: htMotionDBのloadディレクトリ(behファイルの置き場所)
./templete	: 各種のLoadファイルのテンプレート
./program_backup: *.cpp, *.hファイルのバックアップ



進捗状況

8/31
・CreateHMMSrcFileを作成

・dir_nameのディレクトリがない場合の処理をつくろう．ー＞ この処理はいらない．

・HTKによる学習の処理部分を書こう．
→htBehにHTKFileOutを作ろう．
・HTKとのリンカ
→Swap()などが使えるようになった(htBeh.cpp)

次やること
・htBehavior.HTKFileOut()の動作確認
・htMotionDB.MakeContinuousTrainingFiles()の動作確認
・htMotionDB.cppのLearningHMM()とそこで使用される関数の作成


9/1
・htBehavior.HTKFileOut()の動作確認
→問題なさそう．
・htBehavior.MakeLabelFile()も確認．
・CreateHMMSrcFile()がセグメンテーションフォールト
→psymbol->Initialize()がおかしい
→psymbolのメモリを確保していなかった
→直した(psymbolのメモリの開放の部分を後でちゃんと確認すること)
・delet関係がおかしいかも
→if()が逆かも．後ですべてのデストラクタを確認すること
・SetBehaviors()の作成

次やること
・htMotionDBを仕上げる(流れを書く)
・.hmmはラベルをちゃんと書かないとだめ．
・delete関係の確認
・いままでのソースの整理(debug文やメモリ管理の部分など)


9/5
・htMotionDBで学習が成功した
・学習後はファイル名が変わる．どう使おうか．
	(例)HMMソースファイル：ashibum.hmm	学習後：ashibum
・HMMソースファイルは残しておいて学習後のファイルをhtPsymbolとしよう
・htMotionDBにsave_firを追加
・htMotionDBはほぼ完成
・ashibumで0-9のbehを使ったらHInit,HRestともに成功した
  0-20のbehを使ったらHInit失敗．なぜ?
    →StateやMixの数のせいっぽい
      state:20 mix:5だと0-9では成功
      state:30 mix:5ではHRestのみ成功
・htWorkSpaceをつくりはじめた．
    スクリプトファイルで学習ができるようになった

調べるべきこと
・学習後はファイル名が変わる．HInitの時点で変わるのか?
                              HIniが成功した場合，HRestはどちらのファイルを使ってるのか?

やるべきこと
・htWorkSpaceの学習部分以外をつくる
・認識部をつくりたい．HViteの部分とか

・MotionDB::Recognize(htBehavior* beh)を完成させる


9/6
・htMotionDB.Loadなど
・htWorkSpace.InitScriptFileをちょい変える

9/7
・htMotionDB.Load完成

・htMotionDBのコピーコンストラクタつくり始め
・各種コピーコンストラクタをつくる
    htHMMState, htHMM

・htPsymbolはいらない? htHMMにまとめちゃってよくない?
・htHMMにまとめはじめる
	Loadのlabelセットの部分がまだ

9/9
・htHMMをだいたい仕上げた
・htHMMよさそう

・コピーコンストラクタ，デストラクタの確認
    htBehavior:OK, htHMM:OKぽい，htMDS:OK,
    htMotionDB:OK, 

今後やること
・原始シンボル空間をつくりはじめる
・htMotionDB.Recognizeをわける

9/11
・htWorkSpace.Loadの改良
・htMotionDB.Loadも併せて改良
・htMotionDB.ExecByFile作成  // 完
・htMotionDB.Execの引数にHmmTypeを追加 // 完
・htMotionDB.ExecHRestでHInitの後で名前が変わる問題を解決

・Load系でsscanfはstrncmpの後に変える // 完


9/12

終ってないこと．
・delete関係の確認
・いままでのソースの整理(debug文やメモリ管理の部分など)
・コピーコンストラクタ，デストラクタの確認
    htBehavior:OK, htHMM:OKぽい，htMDS:OK,
    htMotionDB:OK, 
・原始シンボル空間をつくりはじめる

今日やること
//・Kullback_DivergenceFileOutに相当する関数をつくる
・htMotionDBはあくまでも学習用にする?
・認識関係は別のクラスで．
・結構な大仕事だ!!
・認識はhtRecogUnit(仮)で行おう．

・htRecogUnitをいちおう仕上げた
・htWorkSpaceも直そう->htRecogUnitを使用するように


9/13
・htRecogUnitでBeforeRecognizeするときはHmmtypeをPERIODICにした．
・htWorkSpaceでhtRecogUnitを使うように改造
・htMotionDBを完全に修正しよう
・htMotionDB，おそらく修正完了

・htWorkSpaceでkullback(互いの原始シンボル間の距離を計算，空間を作る)部分を作成しよう．
・htMotionDBのnum_of_sampleの扱いをしっかり確認(いつ更新するべきか)
・vector<vector <>>型は関数内で用いた場合でもちゃんと開放するべき? スコープなどを調べる．

・htWorkSpaceの関数郡を作成
・htWorkSpaceのLoadでどこまで読み込むかなどを考える．

9/16
・htWorkSpace.DisVectorLoadを作成．

・htWorkSpaceでlabelはどう扱うか?
  現在はmotion_dbのlabelを使ってるが，motion_dbは常に存在するわけではない?
・mapを使おう
・htWorkSpaceでSetRecogUnitsをhtMotionDB以外からもできるようにしよう．
・map作戦はちょっと失敗．やめよう．
  <string, int>でn番目のpairのstringにアクセスしようとしたらセグフォル．
  と思ったら別問題だった．うまく行くかも．でもやめた．いちおバックアップ．
・単なるstringのvectorにした．
・htRecogUnitのLoadを作成ー＞いちおう動作確認


・適当に作った部分(とくにhtWorkSpaceやhtRecogUnit)を
  整理し，htPsymbolSpaceをつくる
・charをstringに統一．

・ソースの整理，確認．
  済：htBehavior, htHMM, 

・htMdsの整理
  AddData(vector<double> vec)を改良
・一通り整理終り．TODO:string.erase()を関数内で行った．必要あり?なし?

9/17
・htPsymbolSpaceをつくりはじめる

・原始シンボル空間からの生成法．
  htWorkSpaceのbeh_bufに生成したbehを随時入れていき，
  beh_bufの頭からどんどん取り出していく．
・htBeh.PopFrontPoseを完成
・htMds.CalcDistanceOfOneCordinateの返り値を
  vector<double> -> vector<double>&に変更．動作はまだ未確認
・参照返しはやめた．

・htWorkSpaceを作ろう

・htHMMの演算子オーバーロード

9/28
・htHMMの演算子オーバーロード完了

9/29
・htWorkSpace.BehGeneFromTransitionでphaseが一周したときの処理をやらねば
・やった
・htWorkSpace.BehGeneFromtransitionは動いた．ソースをきれいにしたい．
・behから距離の計算&距離から座標の計算のフェーズをつくる．(htMDS)

10/1
・htHMMにsampling_timeをもたせよう(行動生成時に使うため)
・hmmファイルを読み込むところに*.hmm.timeというファイルを置く
・htPoseにsampling_timeはいらない

10/2
・(バグ)htBehaviorのdofをどうするか．DEFAULT_BEH_DOF以外ではいまのところ動かない．
・おそらくコピーコンストラクタなどの問題．いつdofを書き換えればいいか．TODO

・多谷さんライブラリなどを使って3次元空間からマウスで座標を取れるようにする
・canvas/canvas_spaceをつくりはじめる

10/3
・描画はできた．
・スレッドを作成しよう．

10/4
・関係ないけど家でもXができるようになったぞ．
・汚いけど状態点をリアルタイムで表示できるようになった．
・もっときれいに整理しよう．
・htCanvasRobotをつくろう．(ロボットをリアルタイムに表示するスレッド)

10/5
・キーボードイベントをしっかりつくる

10/8
・ソースのディレクトリなどを整理．
・CLAPACK, DIMSなども実装できるようにした．

10/11
・htModelを作成
・スペース，ロボットを表示できるようになった．

・スレッドをちゃんと考える

10/18
・ディレクトリをさらに整理
・DIMSのcbrowserを使えるようにした
・cbrowserを用いてのオンライン生成を来週中に．

10/23 Hayashi Marika
・JSKバージョンの整備、不要なDIMS,CLAPACKを削除
